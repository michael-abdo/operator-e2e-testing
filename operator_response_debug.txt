jsonCopy[
  {
    "taskId": "header-logo",
    "root_cause": "The header’s flex/grid alignment is set to `justify-content: flex-end` (or the logo itself is floated right) and the logo element has inline/utility classes adding `background-color: #ff0000`, `border: 2px solid #ffff00`.",
    "technical_recommendations": [
      "Update the header container CSS to `justify-content: flex-start` (or remove `float: right`).",
      "Strip inline styles or utility classes that set the red background and yellow border.",
      "Add a reusable `.logo` class that follows the design system (transparent background, no border, fixed height).",
      "Ensure the logo is wrapped in an `<a href=\"/\">` for accessibility and SEO."
    ],
    "implementation_steps": [
      "Open `Header.jsx` (or equivalent template). Move the `<Logo />` component to the first position inside the flex container.",
      "In `header.scss` (or CSS‑in‑JS), set `display: flex; align-items: center; justify-content: flex-start;`.",
      "Remove any inline `style` attributes on the logo element. Replace with `<img className=\"logo\" ...>`.",
      "Create/update `.logo` rule: `height: 40px; width: auto; background: transparent; border: none;`.",
      "Run the app, hard‑refresh, and verify the logo now appears top‑left with clean styling."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "authentication",
    "root_cause": "The Sign In button was either removed from the navigation markup or hidden behind a feature flag that is currently false, leaving no visible entry point to the auth flow.",
    "technical_recommendations": [
      "Restore the `<NavItem>` (or `<Button>`) that routes to `/login` or opens the login modal.",
      "Add conditional rendering: show when `!isAuthenticated`.",
      "Apply header button styles from the design system (`btn--primary`, small size).",
      "Write Cypress/Jest test ensuring the button is visible when logged out."
    ],
    "implementation_steps": [
      "Edit `HeaderNav.jsx`: add `<Link to=\"/login\" className=\"btn btn--primary\">Sign In</Link>` just before the user‑avatar slot.",
      "If using feature flags, set `SHOW_SIGN_IN=true` in `.env` or remove the flag.",
      "Add CSS: `.btn--primary { background:#0066ff; color:#fff; padding:0.5rem 1rem; border-radius:4px; }`.",
      "Run `npm test -- -u` to update snapshots and ensure the Sign In button renders.",
      "Hard‑refresh the deployed site to confirm the button appears top‑right and opens the login page."
    ],
    "estimated_complexity": "medium"
  },
  {
    "taskId": "calculator-page",
    "root_cause": "The page is displaying a placeholder/error component instead of the real heading—likely because `title` prop is undefined or the page is still wired to a QA demo stub.",
    "technical_recommendations": [
      "Replace the placeholder `<div class=\"error-heading\">BROKEN…</div>` with a proper `<h1>`.",
      "Ensure page template imports real content data (`pageTitle = 'Contract Calculator'`).",
      "Remove inline styles setting `color: red/yellow/blue` and use design system typography."
    ],
    "implementation_steps": [
      "Open `CalculatorPage.jsx` (or `calculator/index.tsx`). Remove the temporary error markup.",
      "Add `<h1 className=\"page-title\">Contract Calculator</h1>` at the top of the main section.",
      "Update SCSS: `.page-title { font-size:2rem; font-weight:600; margin-bottom:1rem; color:#1a1a1a; }`.",
      "Delete `.error-heading` styles from global CSS.",
      "Commit, deploy, hard‑refresh and verify the correct heading appears."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "calculator-form",
    "root_cause": "The Contract Title field component was commented out or its key in the form schema was renamed, causing the render loop to skip it and instead show an error placeholder.",
    "technical_recommendations": [
      "Re‑add the `<input name=\"contractTitle\" />` (or corresponding Formik/React‑Hook‑Form controller).",
      "Bind it to validation schema: `Yup.string().required('Required')`.",
      "Remove the red error placeholder markup and its styles.",
      "Add unit test to ensure the field is present."
    ],
    "implementation_steps": [
      "Edit `CalculatorForm.jsx`: inside the Contract Details section, insert:\n  ```jsx\n  <FormField label=\"Contract Title\" name=\"contractTitle\">\n    <Input type=\"text\" placeholder=\"e.g. Web Development Agreement\" />\n  </FormField>\n  ```",
      "Update `calculatorSchema.ts` to include `contractTitle: Yup.string().required()`. ",
      "Delete the `<div class=\"error-box\">ERROR: Contract Title…</div>` element.",
      "Remove `.error-box` CSS from stylesheet.",
      "Run form tests (`npm run test:forms`) and verify the field renders and validates."
    ],
    "estimated_complexity": "medium"
  },
  {
    "taskId": "calculator-defaults",
    "root_cause": "The form’s initialValues sets `hourlyRate: 999` (likely for demo), and CSS overrides mark the field as ‘error’ with red background.",
    "technical_recommendations": [
      "Change `initialValues.hourlyRate` to `150` in the form initialization.",
      "Remove custom class `error-input` from the Hourly Rate field.",
      "Ensure default input styling: white background, gray border.",
      "Add regression test for default value."
    ],
    "implementation_steps": [
      "Open `calculatorFormDefaults.ts` and set `hourlyRate: 150`.",
      "In the form JSX, replace `className=\"input error-input\"` with `className=\"input\"`.",
      "Delete `.error-input { background:red; color:#fff; border:2px solid #ff0; }` from CSS.",
      "Run Jest snapshot test to confirm default value is 150.",
      "Hard‑refresh deployed page to verify styling and value."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "calculator-functionality",
    "root_cause": "The Calculate button’s `onClick` handler is stubbed with `alert('DEMO ERROR…')` and the calculation logic (`calculateResults()`) is either unimplemented or commented out.",
    "technical_recommendations": [
      "Remove the alert and call a real calculation function.",
      "Implement `calculateResults(values)` to compute Gross Pay, Net Pay, taxes.",
      "Set state `setResults(calculatedValues)` and conditionally render `<ResultsPanel />`.",
      "Add Cypress E2E test to verify results appear."
    ],
    "implementation_steps": [
      "Edit `CalculatorPage.jsx`:\n  ```jsx\n  const handleCalculate = (values) => {\n    const results = calculateResults(values);\n    setResults(results);\n  };\n  ```",
      "Delete `window.alert` line.",
      "Create `utils/calculateResults.ts` with formulas:\n  - gross = hours * hourlyRate\n  - tax = gross * TAX_RATE\n  - net = gross - tax",
      "Add `<ResultsPanel results={results} />` below the form, rendered when `results` is truthy.",
      "Write unit tests for `calculateResults` and E2E test: fill form → click Calculate → assert panel shows.",
      "Deploy and hard‑refresh to confirm functionality."
    ],
    "estimated_complexity": "high"
  },
  {
    "taskId": "button-interactions",
    "root_cause": "Global CSS defines `.btn--primary:hover` with `background:#ff00ff; color:#ffff00; transform:scale(1.3); border:2px solid #ff0000;`—likely added for demo visibility.",
    "technical_recommendations": [
      "Replace hover colors with a 5–10% darker shade of the primary brand color.",
      "Remove large scaling; use `transform: translateY(-2px)` for subtle lift.",
      "Add `transition: background 0.2s ease, transform 0.1s ease;`.",
      "Audit all `.btn--primary` hover states in the design system."
    ],
    "implementation_steps": [
      "Open `buttons.scss` and locate `.btn--primary:hover` rule.",
      "Change to:\n  ```scss\n  .btn--primary:hover {\n    background: darken($primary, 8%);\n    color: #fff;\n    transform: translateY(-2px);\n  }\n  ```",
      "Remove `border` override and large `scale()` transform.",
      "Add `transition` property to `.btn--primary` base rule.",
      "Run visual regression tests, deploy, and hard‑refresh to confirm subtle hover effect."
    ],
    "estimated_complexity": "low"
  }
]
[
  {
    "taskId": "header-logo",
    "root_cause": "The header’s flex/grid alignment is set to `justify-content: flex-end` (or the logo itself is floated right) and the logo element has inline/utility classes adding `background-color: #ff0000`, `border: 2px solid #ffff00`.",
    "technical_recommendations": [
      "Update the header container CSS to `justify-content: flex-start` (or remove `float: right`).",
      "Strip inline styles or utility classes that set the red background and yellow border.",
      "Add a reusable `.logo` class that follows the design system (transparent background, no border, fixed height).",
      "Ensure the logo is wrapped in an `<a href=\"/\">` for accessibility and SEO."
    ],
    "implementation_steps": [
      "Open `Header.jsx` (or equivalent template). Move the `<Logo />` component to the first position inside the flex container.",
      "In `header.scss` (or CSS‑in‑JS), set `display: flex; align-items: center; justify-content: flex-start;`.",
      "Remove any inline `style` attributes on the logo element. Replace with `<img className=\"logo\" ...>`.",
      "Create/update `.logo` rule: `height: 40px; width: auto; background: transparent; border: none;`.",
      "Run the app, hard‑refresh, and verify the logo now appears top‑left with clean styling."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "authentication",
    "root_cause": "The Sign In button was either removed from the navigation markup or hidden behind a feature flag that is currently false, leaving no visible entry point to the auth flow.",
    "technical_recommendations": [
      "Restore the `<NavItem>` (or `<Button>`) that routes to `/login` or opens the login modal.",
      "Add conditional rendering: show when `!isAuthenticated`.",
      "Apply header button styles from the design system (`btn--primary`, small size).",
      "Write Cypress/Jest test ensuring the button is visible when logged out."
    ],
    "implementation_steps": [
      "Edit `HeaderNav.jsx`: add `<Link to=\"/login\" className=\"btn btn--primary\">Sign In</Link>` just before the user‑avatar slot.",
      "If using feature flags, set `SHOW_SIGN_IN=true` in `.env` or remove the flag.",
      "Add CSS: `.btn--primary { background:#0066ff; color:#fff; padding:0.5rem 1rem; border-radius:4px; }`.",
      "Run `npm test -- -u` to update snapshots and ensure the Sign In button renders.",
      "Hard‑refresh the deployed site to confirm the button appears top‑right and opens the login page."
    ],
    "estimated_complexity": "medium"
  },
  {
    "taskId": "calculator-page",
    "root_cause": "The page is displaying a placeholder/error component instead of the real heading—likely because `title` prop is undefined or the page is still wired to a QA demo stub.",
    "technical_recommendations": [
      "Replace the placeholder `<div class=\"error-heading\">BROKEN…</div>` with a proper `<h1>`.",
      "Ensure page template imports real content data (`pageTitle = 'Contract Calculator'`).",
      "Remove inline styles setting `color: red/yellow/blue` and use design system typography."
    ],
    "implementation_steps": [
      "Open `CalculatorPage.jsx` (or `calculator/index.tsx`). Remove the temporary error markup.",
      "Add `<h1 className=\"page-title\">Contract Calculator</h1>` at the top of the main section.",
      "Update SCSS: `.page-title { font-size:2rem; font-weight:600; margin-bottom:1rem; color:#1a1a1a; }`.",
      "Delete `.error-heading` styles from global CSS.",
      "Commit, deploy, hard‑refresh and verify the correct heading appears."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "calculator-form",
    "root_cause": "The Contract Title field component was commented out or its key in the form schema was renamed, causing the render loop to skip it and instead show an error placeholder.",
    "technical_recommendations": [
      "Re‑add the `<input name=\"contractTitle\" />` (or corresponding Formik/React‑Hook‑Form controller).",
      "Bind it to validation schema: `Yup.string().required('Required')`.",
      "Remove the red error placeholder markup and its styles.",
      "Add unit test to ensure the field is present."
    ],
    "implementation_steps": [
      "Edit `CalculatorForm.jsx`: inside the Contract Details section, insert:\n  ```jsx\n  <FormField label=\"Contract Title\" name=\"contractTitle\">\n    <Input type=\"text\" placeholder=\"e.g. Web Development Agreement\" />\n  </FormField>\n  ```",
      "Update `calculatorSchema.ts` to include `contractTitle: Yup.string().required()`. ",
      "Delete the `<div class=\"error-box\">ERROR: Contract Title…</div>` element.",
      "Remove `.error-box` CSS from stylesheet.",
      "Run form tests (`npm run test:forms`) and verify the field renders and validates."
    ],
    "estimated_complexity": "medium"
  },
  {
    "taskId": "calculator-defaults",
    "root_cause": "The form’s initialValues sets `hourlyRate: 999` (likely for demo), and CSS overrides mark the field as ‘error’ with red background.",
    "technical_recommendations": [
      "Change `initialValues.hourlyRate` to `150` in the form initialization.",
      "Remove custom class `error-input` from the Hourly Rate field.",
      "Ensure default input styling: white background, gray border.",
      "Add regression test for default value."
    ],
    "implementation_steps": [
      "Open `calculatorFormDefaults.ts` and set `hourlyRate: 150`.",
      "In the form JSX, replace `className=\"input error-input\"` with `className=\"input\"`.",
      "Delete `.error-input { background:red; color:#fff; border:2px solid #ff0; }` from CSS.",
      "Run Jest snapshot test to confirm default value is 150.",
      "Hard‑refresh deployed page to verify styling and value."
    ],
    "estimated_complexity": "low"
  },
  {
    "taskId": "calculator-functionality",
    "root_cause": "The Calculate button’s `onClick` handler is stubbed with `alert('DEMO ERROR…')` and the calculation logic (`calculateResults()`) is either unimplemented or commented out.",
    "technical_recommendations": [
      "Remove the alert and call a real calculation function.",
      "Implement `calculateResults(values)` to compute Gross Pay, Net Pay, taxes.",
      "Set state `setResults(calculatedValues)` and conditionally render `<ResultsPanel />`.",
      "Add Cypress E2E test to verify results appear."
    ],
    "implementation_steps": [
      "Edit `CalculatorPage.jsx`:\n  ```jsx\n  const handleCalculate = (values) => {\n    const results = calculateResults(values);\n    setResults(results);\n  };\n  ```",
      "Delete `window.alert` line.",
      "Create `utils/calculateResults.ts` with formulas:\n  - gross = hours * hourlyRate\n  - tax = gross * TAX_RATE\n  - net = gross - tax",
      "Add `<ResultsPanel results={results} />` below the form, rendered when `results` is truthy.",
      "Write unit tests for `calculateResults` and E2E test: fill form → click Calculate → assert panel shows.",
      "Deploy and hard‑refresh to confirm functionality."
    ],
    "estimated_complexity": "high"
  },
  {
    "taskId": "button-interactions",
    "root_cause": "Global CSS defines `.btn--primary:hover` with `background:#ff00ff; color:#ffff00; transform:scale(1.3); border:2px solid #ff0000;`—likely added for demo visibility.",
    "technical_recommendations": [
      "Replace hover colors with a 5–10% darker shade of the primary brand color.",
      "Remove large scaling; use `transform: translateY(-2px)` for subtle lift.",
      "Add `transition: background 0.2s ease, transform 0.1s ease;`.",
      "Audit all `.btn--primary` hover states in the design system."
    ],
    "implementation_steps": [
      "Open `buttons.scss` and locate `.btn--primary:hover` rule.",
      "Change to:\n  ```scss\n  .btn--primary:hover {\n    background: darken($primary, 8%);\n    color: #fff;\n    transform: translateY(-2px);\n  }\n  ```",
      "Remove `border` override and large `scale()` transform.",
      "Add `transition` property to `.btn--primary` base rule.",
      "Run visual regression tests, deploy, and hard‑refresh to confirm subtle hover effect."
    ],
    "estimated_complexity": "low"
  }
]